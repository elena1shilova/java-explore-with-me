{
	"info": {
		"_postman_id": "b9e7c33d-b987-4d8d-8cc3-e35913d2996d",
		"name": "ewm-comments-feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37880229"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "Comments",
					"item": [
						{
							"name": "Valid",
							"item": [
								{
									"name": "Добавление комментария",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        event = await api.publishEvent(event.id);\r",
													"        pm.request.removeQueryParams(['users', 'categories']);\r",
													"        pm.collectionVariables.set(\"eid\", event.id);\r",
													"        pm.collectionVariables.set(\"uid\", user.id);\r",
													"        pm.request.url.query.add({key: \"from\",value: \"0\"});\r",
													"        pm.request.url.query.add({key: \"size\",value: \"10\"});\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);   \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = JSON.parse(pm.request.body.raw);\r",
													"const target = pm.response.json();\r",
													"const user = target.authorId;\r",
													"const commId = target.id;\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": \"Comment for event  from user \"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/comments/users/{{uid}}/events/{{eid}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"comments",
												"users",
												"{{uid}}",
												"events",
												"{{eid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Обновление комментария",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
													"    pm.response.to.be.ok; // код ответа должен быть равен 200 OK\r",
													"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
													"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
													"}); \r",
													"const source = JSON.parse(pm.request.body.raw);\r",
													"const target = pm.response.json();\r",
													"const targetComment = pm.collectionVariables.get(\"commentId\");\r",
													"const user = pm.collectionVariables.get(\"uid\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": \"Update Comment for event from user\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/comments/users/{{uid}}/{{commentId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"comments",
												"users",
												"{{uid}}",
												"{{commentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "получение обновленного комментария",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
													"    pm.response.to.be.ok; // код ответа должен быть равен 200 OK\r",
													"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
													"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
													"})\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/comments/users/{{uid}}/{{commentId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"comments",
												"users",
												"{{uid}}",
												"{{commentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление комментария от юзера к другому евенту",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        const user1 = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        event = await api.publishEvent(event.id);\r",
													"        pm.request.removeQueryParams(['users', 'categories']);\r",
													"        pm.collectionVariables.set(\"eid\", event.id);\r",
													"        pm.collectionVariables.set(\"uid\", user1.id);\r",
													"        pm.request.url.query.add({key: \"from\",value: \"0\"});\r",
													"        pm.request.url.query.add({key: \"size\",value: \"10\"});\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);   \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": \"Добавляем текст к евенту другого пользователя admin SearchText\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/comments/users/{{uid}}/events/{{eid}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"comments",
												"users",
												"{{uid}}",
												"events",
												"{{eid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление комментария для удаления",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        event = await api.publishEvent(event.id);\r",
													"        pm.request.removeQueryParams(['users', 'categories']);\r",
													"        pm.collectionVariables.set(\"eid\", event.id);\r",
													"        pm.collectionVariables.set(\"uid\", user.id);\r",
													"        pm.request.url.query.add({key: \"from\",value: \"0\"});\r",
													"        pm.request.url.query.add({key: \"size\",value: \"10\"});\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
													"    pm.response.to.have.status(201);   \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const source = JSON.parse(pm.request.body.raw);\r",
													"const target = pm.response.json();\r",
													"const user = target.authorId;\r",
													"const commId = target.id;\r",
													"pm.collectionVariables.set(\"uid\", user);\r",
													"pm.collectionVariables.set(\"commentId\", commId);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": \"Comment for event  from user \"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/comments/users/{{uid}}/events/{{eid}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"comments",
												"users",
												"{{uid}}",
												"events",
												"{{eid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "получение комментария",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
													"    pm.response.to.be.ok; // код ответа должен быть равен 200 OK\r",
													"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
													"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
													"})\r",
													"var template = `\r",
													"<style type=\"text/css\">\r",
													"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
													"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
													"    .tftable tr {background-color:#ffffff;}\r",
													"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
													"    .tftable tr:hover {background-color:#e0ffff;}\r",
													"</style>\r",
													"\r",
													"<table class=\"tftable\" border=\"1\">\r",
													"    <tr>\r",
													"        <th>ID</th>\r",
													"        <th>Author ID</th>\r",
													"        <th>Author Name</th>\r",
													"        <th>Author Email</th>\r",
													"        <th>Text</th>\r",
													"        <th>Event ID</th>\r",
													"        <th>Event Annotation</th>\r",
													"        <th>Category ID</th>\r",
													"        <th>Category Name</th>\r",
													"        <th>Created Date</th>\r",
													"        <th>Description</th>\r",
													"        <th>Event Date</th>\r",
													"        <th>Initiator ID</th>\r",
													"        <th>Initiator Name</th>\r",
													"        <th>Initiator Email</th>\r",
													"        <th>Location ID</th>\r",
													"        <th>Latitude</th>\r",
													"        <th>Longitude</th>\r",
													"        <th>Paid</th>\r",
													"        <th>Participant Limit</th>\r",
													"        <th>Publisher Date</th>\r",
													"        <th>Request Moderation</th>\r",
													"        <th>Event Status</th>\r",
													"        <th>Title</th>\r",
													"    </tr>\r",
													"    <tr>\r",
													"        <td>{{id}}</td>\r",
													"        <td>{{author.id}}</td>\r",
													"        <td>{{author.name}}</td>\r",
													"        <td>{{author.email}}</td>\r",
													"        <td>{{text}}</td>\r",
													"        <td>{{event.id}}</td>\r",
													"        <td>{{event.annotation}}</td>\r",
													"        <td>{{event.category.id}}</td>\r",
													"        <td>{{event.category.name}}</td>\r",
													"        <td>{{event.createdDate}}</td>\r",
													"        <td>{{event.description}}</td>\r",
													"        <td>{{event.eventDate}}</td>\r",
													"        <td>{{event.initiator.id}}</td>\r",
													"        <td>{{event.initiator.name}}</td>\r",
													"        <td>{{event.initiator.email}}</td>\r",
													"        <td>{{event.location.id}}</td>\r",
													"        <td>{{event.location.lat}}</td>\r",
													"        <td>{{event.location.lon}}</td>\r",
													"        <td>{{event.paid}}</td>\r",
													"        <td>{{event.participantLimit}}</td>\r",
													"        <td>{{event.publisherDate}}</td>\r",
													"        <td>{{event.requestModeration}}</td>\r",
													"        <td>{{event.eventStatus}}</td>\r",
													"        <td>{{event.title}}</td>\r",
													"    </tr>\r",
													"</table>\r",
													"`;\r",
													"\r",
													"function constructVisualizerPayload() {\r",
													"    return { response: pm.response.json() }\r",
													"}\r",
													"\r",
													"pm.visualizer.set(template, constructVisualizerPayload());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/comments/users/{{uid}}/{{commentId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"comments",
												"users",
												"{{uid}}",
												"{{commentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "получение комментариев события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"   pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/comments/{{eid}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"comments",
												"{{eid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "получение комментариев события, пустой лист",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const user = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
													"        event = await api.publishEvent(event.id);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            // выполняем наш скрипт\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/comments/{{eid}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"comments",
												"{{eid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление комментария админом",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"comments",
												"{{commentId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "4xx",
			"item": [
				{
					"name": "Добавление комментария c пустым текстом",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.request.removeQueryParams(['users', 'categories']);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"  \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/users/{{uid}}/events/{{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"users",
								"{{uid}}",
								"events",
								"{{eid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария с текстом более 2000 символов",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.request.removeQueryParams(['users', 'categories']);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.request.url.query.add({key: \"from\",value: \"0\"});\r",
									"        pm.request.url.query.add({key: \"size\",value: \"10\"});\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/users/{{uid}}/events/{{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"users",
								"{{uid}}",
								"events",
								"{{eid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.request.removeQueryParams(['users', 'categories']);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.request.url.query.add({key: \"from\",value: \"0\"});\r",
									"        pm.request.url.query.add({key: \"size\",value: \"10\"});\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"const user = target.authorId;\r",
									"const commId = target.id;\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Comment for event  from user \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/users/{{uid}}/events/{{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"users",
								"{{uid}}",
								"events",
								"{{eid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария текст длиной более 2000 символов Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400); \r",
									"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
									"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст какой-тотекст\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"users",
								":userId",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "{{commentId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async addComment(userId, eventId , comment, verbose=null) {",
					"        return this.post(\"/comments/users/\" + userId + \"/events/\" + eventId, comment, \"Ошибка при добавлении комментария\", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getComment(commentId){",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremSentence}}')",
					"        }",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": "1"
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": "1"
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "commentId",
			"value": "1",
			"type": "string"
		}
	]
}